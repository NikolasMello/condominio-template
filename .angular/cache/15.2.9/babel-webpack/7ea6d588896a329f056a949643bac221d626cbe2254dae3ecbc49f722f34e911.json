{"ast":null,"code":"export default class Pagination {\n  constructor(itemsPerPage, items) {\n    this.currentPage = 1;\n    this.page = [];\n    this.pageButtons = [];\n    this.items = items;\n    this.itemsPerPage = itemsPerPage;\n    this.setTotamItems();\n    this.setItemsPerPage();\n    this.updatePageButtons(1, this.totalPages);\n  }\n  setTotamItems() {\n    this.totalItems = this.items.length;\n  }\n  setItemsPerPage() {\n    this.totalPages = Math.floor(this.totalItems / this.itemsPerPage);\n  }\n  updatePageButtons(pageNumber, totalButtons) {\n    this.pageButtons = [];\n    this.pageButtons.push(1);\n    let maxIteration = 3;\n    if (pageNumber + 3 >= totalButtons) {\n      for (let i = pageNumber; i <= totalButtons; i++) {\n        if (i > 1) {\n          this.pageButtons.push(i);\n        }\n      }\n    } else if (pageNumber + 3 < totalButtons) {\n      for (let i = pageNumber; i <= pageNumber + 3; i++) {\n        if (i > 1) {\n          if (i === pageNumber + 3) {\n            this.pageButtons.push(\"...\");\n            this.pageButtons.push(totalButtons);\n          } else {\n            this.pageButtons.push(i);\n          }\n        }\n      }\n    } else if (totalButtons - (pageNumber + 3) < 3) {\n      let startIndex = totalButtons - 3;\n      for (let i = startIndex; i <= totalButtons; i++) {\n        if (i > 1) {\n          this.pageButtons.push(i);\n        }\n      }\n    }\n  }\n  getPage(pageNumber) {\n    let firstIndex = this.itemsPerPage * pageNumber - 1;\n    let lastIndex = this.totalItems < firstIndex + this.itemsPerPage ? this.totalItems : firstIndex + this.itemsPerPage;\n    this.page = [];\n    for (let i = firstIndex; i <= lastIndex; i++) {\n      this.page.push(this.items[i]);\n    }\n    this.currentPage = pageNumber;\n    this.updatePageButtons(pageNumber, this.totalPages);\n  }\n}","map":{"version":3,"mappings":"AAAA,eAAc,MAAOA,UAAU;EAU3BC,YAAYC,YAAmB,EAAEC,KAAS;IARnC,gBAAW,GAAW,CAAC;IAIvB,SAAI,GAAQ,EAAE;IACd,gBAAW,GAAuB,EAAE;IAIvC,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACD,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,aAAa,EAAE;IACpB,IAAI,CAACC,eAAe,EAAE;IACtB,IAAI,CAACC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAACC,UAAU,CAAC;EAC9C;EAEAH,aAAa;IACT,IAAI,CAACI,UAAU,GAAG,IAAI,CAACL,KAAK,CAACM,MAAM;EACvC;EAEAJ,eAAe;IACX,IAAI,CAACE,UAAU,GAAGG,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,UAAU,GAAG,IAAI,CAACN,YAAY,CAAC;EACrE;EAEAI,iBAAiB,CAACM,UAAkB,EAAEC,YAAoB;IACtD,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACA,WAAW,CAACC,IAAI,CAAC,CAAC,CAAC;IACxB,IAAIC,YAAY,GAAG,CAAC;IAEpB,IAAGJ,UAAU,GAAG,CAAC,IAAIC,YAAY,EAAC;MAE1B,KAAI,IAAII,CAAC,GAAGL,UAAU,EAAEK,CAAC,IAAIJ,YAAY,EAAEI,CAAC,EAAE,EAAC;QAC3C,IAAGA,CAAC,GAAG,CAAC,EAAC;UACL,IAAI,CAACH,WAAW,CAACC,IAAI,CAACE,CAAC,CAAC;;;KAInC,MAAM,IAAGL,UAAU,GAAG,CAAC,GAAGC,YAAY,EAAC;MAEpC,KAAI,IAAII,CAAC,GAAGL,UAAU,EAAEK,CAAC,IAAIL,UAAU,GAAG,CAAC,EAAEK,CAAC,EAAE,EAAC;QAC7C,IAAGA,CAAC,GAAG,CAAC,EAAE;UACN,IAAGA,CAAC,KAAKL,UAAU,GAAG,CAAC,EAAC;YACpB,IAAI,CAACE,WAAW,CAACC,IAAI,CAAC,KAAK,CAAC;YAC5B,IAAI,CAACD,WAAW,CAACC,IAAI,CAACF,YAAY,CAAC;WACtC,MAAM;YACH,IAAI,CAACC,WAAW,CAACC,IAAI,CAACE,CAAC,CAAC;;;;KAKvC,MAAM,IAAGJ,YAAY,IAAID,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,EAAG;MAC5C,IAAIM,UAAU,GAAGL,YAAY,GAAG,CAAC;MACjC,KAAI,IAAII,CAAC,GAAGC,UAAU,EAAED,CAAC,IAAIJ,YAAY,EAAEI,CAAC,EAAE,EAAC;QAC3C,IAAGA,CAAC,GAAG,CAAC,EAAC;UACL,IAAI,CAACH,WAAW,CAACC,IAAI,CAACE,CAAC,CAAC;;;;EAI5C;EAEAE,OAAO,CAACP,UAAkB;IACtB,IAAIQ,UAAU,GAAI,IAAI,CAAClB,YAAY,GAAGU,UAAU,GAAG,CAAC;IACpD,IAAIS,SAAS,GAAG,IAAI,CAACb,UAAU,GAAGY,UAAU,GAAG,IAAI,CAAClB,YAAY,GAAG,IAAI,CAACM,UAAU,GAAGY,UAAU,GAAG,IAAI,CAAClB,YAAY;IACnH,IAAI,CAACoB,IAAI,GAAG,EAAE;IAEd,KAAI,IAAIL,CAAC,GAAGG,UAAU,EAAEH,CAAC,IAAII,SAAS,EAAEJ,CAAC,EAAE,EAAC;MACxC,IAAI,CAACK,IAAI,CAACP,IAAI,CAAC,IAAI,CAACZ,KAAK,CAACc,CAAC,CAAC,CAAC;;IAEjC,IAAI,CAACM,WAAW,GAAGX,UAAU;IAC7B,IAAI,CAACN,iBAAiB,CAACM,UAAU,EAAE,IAAI,CAACL,UAAU,CAAC;EACvD","names":["Pagination","constructor","itemsPerPage","items","setTotamItems","setItemsPerPage","updatePageButtons","totalPages","totalItems","length","Math","floor","pageNumber","totalButtons","pageButtons","push","maxIteration","i","startIndex","getPage","firstIndex","lastIndex","page","currentPage"],"sourceRoot":"","sources":["C:\\condominio-template\\src\\app\\util\\pagination.ts"],"sourcesContent":["export default class Pagination<T>{\r\n\r\n    public currentPage: number = 1;\r\n    public totalPages: number;\r\n    public itemsPerPage: number;\r\n    public totalItems: number;\r\n    public page: T[] = [];\r\n    public pageButtons:(number | string)[] = [];\r\n    private items: T[];\r\n\r\n    constructor(itemsPerPage:number, items:T[]){\r\n        this.items = items;\r\n        this.itemsPerPage = itemsPerPage;\r\n        this.setTotamItems();\r\n        this.setItemsPerPage();\r\n        this.updatePageButtons(1, this.totalPages);\r\n    }\r\n\r\n    setTotamItems(){\r\n        this.totalItems = this.items.length;\r\n    }\r\n\r\n    setItemsPerPage(){\r\n        this.totalPages = Math.floor(this.totalItems / this.itemsPerPage);\r\n    }\r\n\r\n    updatePageButtons(pageNumber: number, totalButtons: number){\r\n        this.pageButtons = [];\r\n        this.pageButtons.push(1);\r\n        let maxIteration = 3;\r\n\r\n        if(pageNumber + 3 >= totalButtons){\r\n            \r\n                for(let i = pageNumber; i <= totalButtons; i++){\r\n                    if(i > 1){\r\n                        this.pageButtons.push(i);\r\n                    }\r\n                }\r\n\r\n            } else if(pageNumber + 3 < totalButtons){\r\n                \r\n                for(let i = pageNumber; i <= pageNumber + 3; i++){\r\n                    if(i > 1 ){\r\n                        if(i === pageNumber + 3){\r\n                            this.pageButtons.push(\"...\");\r\n                            this.pageButtons.push(totalButtons);\r\n                        } else {\r\n                            this.pageButtons.push(i);\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n            } else if(totalButtons - (pageNumber + 3) < 3 ) {\r\n                let startIndex = totalButtons - 3;\r\n                for(let i = startIndex; i <= totalButtons; i++){\r\n                    if(i > 1){\r\n                        this.pageButtons.push(i);\r\n                    }\r\n                }\r\n            }\r\n    }\r\n\r\n    getPage(pageNumber: number){\r\n        let firstIndex = (this.itemsPerPage * pageNumber) -1;\r\n        let lastIndex = this.totalItems < firstIndex + this.itemsPerPage ? this.totalItems : firstIndex + this.itemsPerPage;\r\n        this.page = [];\r\n\r\n        for(let i = firstIndex; i <= lastIndex; i++){\r\n            this.page.push(this.items[i]);\r\n        }\r\n        this.currentPage = pageNumber;\r\n        this.updatePageButtons(pageNumber, this.totalPages);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}